@page "/intersectii"
@using DisertatieWeb.Models
@using DisertatieWeb.Pages.Components
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Monitorizare Intersecții și Senzori</PageTitle>

<h3 class="rz-mb-3">Monitorizare Intersecții și Senzori</h3>

<RadzenRow>
    <RadzenColumn Size="12" SizeMd="4">
        <RadzenCard>
            <RadzenDropDown Data="@senzori" TextProperty="Nume" ValueProperty="Id"
                            @bind-Value="@senzorSelectatId"
                            Change="@OnSenzorSelectatChanged"
                            Placeholder="Selectează un senzor" Style="width: 100%;" />
            @if (senzorSelectat != null)
            {
                <RadzenCard Style="margin-top: 20px">
                    <h3>@senzorSelectat.Nume</h3>
                    <p><strong>Coordonate:</strong> @senzorSelectat.Latitudine, @senzorSelectat.Longitudine</p>
                    <p><strong>Status:</strong> @senzorSelectat.Status</p>
                    <RadzenDataList Data="@senzorSelectat.Comentarii" TItem="ComentariuSenzor" Style="max-height: 300px; overflow-y: auto;">
                        <Template Context="comentariu">
                            <div class="rz-mb-2">
                                <strong>@comentariu.Autor</strong> (@comentariu.Data.ToShortDateString()):
                                <br />
                                <em>@comentariu.Text</em>
                            </div>
                        </Template>
                    </RadzenDataList>
                </RadzenCard>
            }
        </RadzenCard>
    </RadzenColumn>

    <RadzenColumn Size="12" SizeMd="8">
        <RadzenCard>
            <MapaInterese Senzori="@senzori" OnSenzorSelectat="SelecteazaSenzor" />
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    List<SenzorTrafic> senzori = new();
    int senzorSelectatId;
    SenzorTrafic senzorSelectat;

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient();
        senzori = await http.GetFromJsonAsync<List<SenzorTrafic>>(NavigationManager.BaseUri + "api/senzori");

        if (senzori.Any())
        {
            senzorSelectatId = senzori.First().Id;
            senzorSelectat = senzori.First();
        }
    }

    void OnSenzorSelectatChanged(object value)
    {
        senzorSelectatId = (int)value;
        senzorSelectat = senzori.FirstOrDefault(s => s.Id == senzorSelectatId);
    }

    async Task SelecteazaSenzor(int senzorId)
    {
        senzorSelectat = senzori.FirstOrDefault(s => s.Id == senzorId);
    }
}
