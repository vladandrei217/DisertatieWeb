@page "/senzori-config"
@using DisertatieWeb.Models
@using DisertatieWeb.Models.DisertatieWeb.Models
@using Radzen
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>Configurare Senzori</PageTitle>

<h3>Configurare Senzori</h3>

<!-- Tabelul cu senzorii -->
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@senzori" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn TItem="Senzor" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="Senzor" Property="Nume" Title="Nume" />
        <RadzenDataGridColumn TItem="Senzor" Property="Status" Title="Status" />
        <RadzenDataGridColumn TItem="Senzor" Context="senzor" Title="Configurații">
            <Template Context="senzor">
                <RadzenButton Icon="settings" Text="Configurație" ButtonStyle="ButtonStyle.Primary"
                              Click="() => ShowSenzorConfigDialog(senzor)" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<!-- Formular pentru configurarea senzorului -->
@* <RadzenStack Gap="1.5rem" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
    @if (senzorSelectat != null)
    {
        <RadzenTextBox @bind-Value="senzorSelectat.Nume" Placeholder="Nume Senzor" />
        <RadzenDropDown @bind-Value="senzorSelectat.Status" Data="@statuses" TextProperty="Name" ValueProperty="Value" Placeholder="Selectează Status" />
        <RadzenButton Text="Salvează Configurație" ButtonStyle="ButtonStyle.Primary" Click="SaveSenzorConfig" />
    }
</RadzenStack> *@

@code {
    private List<Senzor> senzori = new();
    private Senzor senzorSelectat;
    private List<StatusOption> statuses = new List<StatusOption>
        {
        new StatusOption { Value = "Activ", Name = "Activ" },
        new StatusOption { Value = "Inactiv", Name = "Inactiv" }
        };

    protected override void OnInitialized()
    {
        try
        {
            // Inițializare senzori doar dacă DialogService nu este null
            if (DialogService == null)
            {
                Console.WriteLine("DialogService nu este disponibil.");
            }
            else
            {
                // Simulăm senzorii din aplicație
                senzori = new List<Senzor>
                    {
                    new Senzor { Id = 1, Nume = "Senzor 1", Status = "Activ" },
                    new Senzor { Id = 2, Nume = "Senzor 2", Status = "Inactiv" }
                    };
                Console.WriteLine("Senzorii au fost inițializați.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la inițializarea componentelor: {ex.Message}");
        }
    }

    private async Task ShowSenzorConfigDialog(Senzor senzor)
    {
        try
        {
            if (DialogService != null)
            {
                senzorSelectat = senzor;
                Console.WriteLine($"Deschiderea dialogului pentru senzorul: {senzor.Nume}");

                await DialogService.OpenAsync("Configurație Senzor", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="senzorSelectat.Nume" Placeholder="Nume Senzor" />
        <RadzenDropDown @bind-Value="senzorSelectat.Status" Data="@statuses" TextProperty="Name" ValueProperty="Value" Placeholder="Selectează Status" />
        <RadzenButton Text="Salvează Configurație" ButtonStyle="ButtonStyle.Primary" Click="() => SaveSenzorConfig()" />
    </RadzenStack>);
            }
            else
            {
                Console.WriteLine("DialogService nu este disponibil atunci când încercăm să deschidem dialogul.");
            }
        }
        catch (ObjectDisposedException ex)
        {
            Console.WriteLine($"Eroare: {ex.Message} - DialogService a fost eliminat.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare neașteptată la deschiderea dialogului: {ex.Message}");
        }
    }

    private async Task SaveSenzorConfig()
    {
        try
        {
            if (senzorSelectat != null)
            {
                Console.WriteLine($"Senzorul {senzorSelectat.Nume} a fost configurat cu statusul {senzorSelectat.Status}");
                // Închide dialogul după salvare
                DialogService.Close();
            }
            else
            {
                Console.WriteLine("Senzorul selectat este null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la salvarea configurației senzorului: {ex.Message}");
        }
    }

    public class StatusOption
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }
}
