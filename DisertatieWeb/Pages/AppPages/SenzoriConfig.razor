@page "/senzori-config"
@using DisertatieWeb.Models
@using DisertatieWeb.Models.DisertatieWeb.Models
@inject IHttpClientFactory HttpClientFactory
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Configurare Senzori</PageTitle>

<h3>Configurare Senzori</h3>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true" Data="@senzori" ColumnWidth="250px"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn TItem="Senzor" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="Senzor" Property="Nume" Title="Nume" />
        <RadzenDataGridColumn TItem="Senzor" Property="Status" Title="Status" />
        <RadzenDataGridColumn TItem="Senzor" Context="senzor" Title="Configurații">
            <Template Context="senzor">
                <RadzenButton Icon="settings" Text="Configurație"
                              ButtonStyle="ButtonStyle.Primary"
                              Click="() => ShowSenzorConfigDialog(senzor)" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<Senzor> senzori = new();
    private Senzor senzorSelectat;
    private List<StatusOption> statuses = new()
        {
        new StatusOption { Value = "Activ", Name = "Activ" },
        new StatusOption { Value = "Inactiv", Name = "Inactiv" }
        };

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient();
        senzori = await http.GetFromJsonAsync<List<Senzor>>(NavigationManager.BaseUri + "api/senzoriConfig");
    }

    private async Task ShowSenzorConfigDialog(Senzor senzor)
    {
        senzorSelectat = new Senzor
                {
                    Id = senzor.Id,
                    Nume = senzor.Nume,
                    Status = senzor.Status,
                    Detalii = senzor.Detalii
                };

        await DialogService.OpenAsync("Configurație Senzor", ds =>
    @<RadzenStack Gap="1rem">
        <RadzenTextBox @bind-Value="senzorSelectat.Nume" Placeholder="Nume Senzor" />
        <RadzenDropDown @bind-Value="senzorSelectat.Status" Data="@statuses"
                        TextProperty="Name" ValueProperty="Value" Placeholder="Selectează Status" />
        <RadzenTextArea @bind-Value="senzorSelectat.Detalii" Placeholder="Detalii" Style="width:100%" />
        <RadzenButton Text="Salvează" ButtonStyle="ButtonStyle.Primary" Click="() => SaveSenzorConfig()" />
    </RadzenStack>);
    }

    private async Task SaveSenzorConfig()
    {
        var http = HttpClientFactory.CreateClient();
        await http.PutAsJsonAsync(NavigationManager.BaseUri + $"api/senzoriConfig/{senzorSelectat.Id}", senzorSelectat);

        // Refresh listă după salvare
        senzori = await http.GetFromJsonAsync<List<Senzor>>(NavigationManager.BaseUri + "api/senzoriConfig");
        DialogService.Close();
    }

    public class StatusOption
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }
}
