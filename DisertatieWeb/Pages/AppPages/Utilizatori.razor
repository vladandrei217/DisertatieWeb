@page "/utilizatori"
@using DisertatieWeb.Models
@using Radzen
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject DialogService DialogService

<PageTitle>Utilizatori</PageTitle>

<!-- Meniul de administrare -->
<div class="admin-menu">
    <RadzenButton Text="Adaugă Utilizator" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="ShowAddUserDialog" />
</div>

<!-- Tabelul cu utilizatori -->
<RadzenDataGrid TItem="UserModel" Data="@users" RowSelect="OnRowSelect" AllowPaging="true" PageSize="5" AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn TItem="UserModel" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="UserModel" Property="Nume" Title="Nume" />
        <RadzenDataGridColumn TItem="UserModel" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="UserModel" Context="user" Title="Acțiuni">
            <Template Context="user">
                <RadzenButton Icon="edit" Text="Editează" ButtonStyle="ButtonStyle.Secondary" Click="() => ShowEditUserDialog(user)" />
                <RadzenButton Icon="delete" Text="Șterge" ButtonStyle="ButtonStyle.Danger" Click="() => DeleteUser(user)" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<UserModel> users = new();
    private UserModel selectedUser;
    private UserModel newUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var http = HttpClientFactory.CreateClient();
        users = await http.GetFromJsonAsync<List<UserModel>>(NavigationManager.BaseUri + "api/users");
    }

    private async Task ShowAddUserDialog()
    {
        newUser = new UserModel();

        await DialogService.OpenAsync("Adaugă Utilizator", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="newUser.Nume" Placeholder="Nume Utilizator" />
        <RadzenTextBox @bind-Value="newUser.Email" Placeholder="Email Utilizator" />
        <RadzenButton Text="Adaugă" ButtonStyle="ButtonStyle.Primary" Click="AddUser" />
    </RadzenStack>);
    }

    private async Task ShowEditUserDialog(UserModel user)
    {
        selectedUser = new UserModel
                {
                    Id = user.Id,
                    Nume = user.Nume,
                    Email = user.Email
                };

        await DialogService.OpenAsync("Editează Utilizator", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="selectedUser.Nume" Placeholder="Nume Utilizator" />
        <RadzenTextBox @bind-Value="selectedUser.Email" Placeholder="Email Utilizator" />
        <RadzenButton Text="Salvează" ButtonStyle="ButtonStyle.Primary" Click="EditUser" />
    </RadzenStack>);
    }

    private async Task AddUser()
    {
        var http = HttpClientFactory.CreateClient();
        var response = await http.PostAsJsonAsync(NavigationManager.BaseUri + "api/users", newUser);

        if (response.IsSuccessStatusCode)
            await LoadUsers();

        DialogService.Close();
    }

    private async Task EditUser()
    {
        var http = HttpClientFactory.CreateClient();
        var response = await http.PutAsJsonAsync(NavigationManager.BaseUri + $"api/users/{selectedUser.Id}", selectedUser);

        if (response.IsSuccessStatusCode)
            await LoadUsers();

        DialogService.Close();
    }

    private async Task DeleteUser(UserModel user)
    {
        var http = HttpClientFactory.CreateClient();
        var response = await http.DeleteAsync(NavigationManager.BaseUri + $"api/users/{user.Id}");

        if (response.IsSuccessStatusCode)
            await LoadUsers();
    }

    private void OnRowSelect(UserModel user)
    {
        selectedUser = user;
    }
}
